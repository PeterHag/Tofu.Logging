using System;
using Tofu.Collections;

namespace Tofu.Logging
{
	public class LogStreamerInitArgs
    {
        #region Constructors

        // ******************************************************************
        // *																*
        // *					        Constructors    				    *
        // *																*
        // ******************************************************************

        /// <summary>
        /// Constructor
        /// </summary>
        /// <param name="sessionGuid">
        /// A Guid that uniquely indentifies the current logging session
        /// </param>
        /// <param name="sessionFolderFullName">
        /// A string that holds the current session folder (i.e. location where
        /// current log(s) will be persisted) including process context name
        /// </param>
        /// <param name="sessionResourceFolderFullName">
        /// A string that specifies the current session resource folder (i.e. location
        /// inside session folder where resource files will be persisted)
        /// </param>
        /// <param name="config">
        /// An ILogConfig reference to the configuration when the session was started
        /// </param>
        /// <param name="parameters">
        /// A Dictionary that holds parameters that were specified in the 
        /// application configuration and associated with this streamer
        /// </param>
        /// <param name="logName">
        /// A string that specifies the log that is associated with this streamer
        /// </param>
        /// <param name="concurrentStreamersSameTypeCount">
        /// An integer that holds the number of streamer instances for this log that are of same 
        /// class type. If this value equals <i>1</i>, there is only 1 streamer instance of this 
        /// class type associated with the specified log.
        /// </param>
        /// <param name="concurrentStreamersSameTypeIndex">
        /// An integer that holds the specific index number of the streamer instance for this 
        /// log for a specific class type. This property will only hold a value larger than zero 
        /// when multiple streamers of same class type are associated to same log.
        /// </param>
        public LogStreamerInitArgs(
            Guid sessionGuid,
            string sessionFolderFullName,
            string sessionResourceFolderFullName,
            ILogConfig config,
            IParameterDictionary parameters,
            string logName,
            int concurrentStreamersSameTypeCount,
            int concurrentStreamersSameTypeIndex)
        {
            // Store agruments into members
            SessionGuid = sessionGuid;
            SessionFolderFullName = sessionFolderFullName;
            SessionResourceFolderFullName = sessionResourceFolderFullName;
            SessionConfig = config;
            Parameters = parameters;
            LogName = logName;
            ConcurrentStreamersSameTypeCount = concurrentStreamersSameTypeCount;
            ConcurrentStreamersSameTypeIndex = concurrentStreamersSameTypeIndex;
        }

        #endregion

        #region Public Properties

        // ******************************************************************
        // *																*
        // *					      Public Properties    				    *
        // *																*
        // ******************************************************************

        /// <summary>
        /// Gets a string that specifies the log that is associated with this streamer
        /// </summary>
        public virtual string LogName
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets a Guid that uniquely indentifies the current logging session
        /// </summary>
        public virtual Guid SessionGuid
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets a string that holds the current session folder (i.e. directory where
        /// logs files generated by streamer must be persisted)
        /// </summary>
        public virtual string SessionFolderFullName
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets a string that specifies the current session resource folder (i.e. directory
        /// where resource files generated by streamer must be persisted)
        /// </summary>
        public virtual string SessionResourceFolderFullName
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets a ParameterDictionary instance that holds parameters that were specified 
        /// in the configuration entry that was used to create the streamer
        /// </summary>
        public virtual IParameterDictionary Parameters
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets an integer that holds the number of streamer instances for this log that
        /// are of same class type. If this value equals <i>1</i>, there is only 1 streamer
        /// instance of this class type associated with the specified log.
        /// </summary>
        public virtual int ConcurrentStreamersSameTypeCount
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets an integer that holds the specific index number of the streamer instance for this 
        /// log for a specific class type. This property will only hold a value larger than zero 
        /// when multiple streamers of same class type are associated to same log.
        /// </summary>
        public virtual int ConcurrentStreamersSameTypeIndex
        {
            get;
            private set;
        }

        /// <summary>
        /// Gets an ILogConfig reference to the configuration when the session was started
        /// </summary>
        public virtual ILogConfig SessionConfig
        {
            get;
            private set;
        }

        #endregion
    }
}
